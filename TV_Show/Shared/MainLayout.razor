@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService storage
@inject NavigationManager manager
@using MongoDB.Driver;

<div class="sidebar">
    <NavMenu />
</div>

<div class="main">

    <div class="top-row px-4" style="z-index: 3">
        @if (IsUserLogged)
        {
            <button type="button" class="btn btn-link" data-bs-toggle="modal2" data-bs-target="#modal"
                    @onclick="LogOut">
                Выйти
            </button>
        }
        else
        {
            <button type="button" class="btn btn-link" data-bs-toggle="modal" data-bs-target="#modal"
                    style="margin-right: 0;">
                Войти
            </button>
            <button type="button" class="btn btn-link" data-bs-toggle="modal" data-bs-target="#modal1"
                    style="margin-left:0">
                Зарегистрироваться
            </button>
        }
    </div>

    <div class="modal fade" id="modal" tabindex="-1">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Sign in to TV-Show</h5>
                </div>
                <div class="modal-body" style="margin-bottom: 15px;">
                    @if(!userIsAuthorised)
                    {
                        <div class="alert alert-danger" role="alert">
                            Пользователь не найден!
                            Пожалуйста, проверьте правильность вводимых данных!
                        </div>
                    }
                    <p style="width:100%; margin-bottom: inherit;">Username or email address</p>
                    <input style="width: 100%; margin-bottom: inherit;" @bind="CurrentUserLogin" />
                    <p style="width: 100%; margin-bottom: inherit;">Password</p>
                    <input style="width: 100%; margin-bottom: inherit;" @bind="CurrentUserPassword" />
                    <button type="button"
                                style="height: 40px; width: 100%; margin-top: 15px;"
                                @onclick="SignIn">
                            Sign in
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="modal1" tabindex="-1">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Registration in TV-Show</h5>
                </div>
                <div class="modal-body" style="margin-bottom: 15px;">
                    @if (!userIsAuthorised)
                    {
                        <div class="alert alert-danger" role="alert">
                            Пользователь с такими данными уже зарегистрирован!
                            Пожалуйста, выберите другой логин и пароль!
                        </div>
                    }
                    <p style="width:100%; margin-bottom: inherit;">Username or email address</p>
                    <input style="width: 100%; margin-bottom: inherit;" @bind-value="CurrentUserLogin" />
                    <p style="width: 100%; margin-bottom: inherit;">Password</p>
                    <input style="width: 100%; margin-bottom: inherit;" @bind-value="CurrentUserPassword" />
                    <button type="button"
                            style="height: 40px; width: 100%; margin-top: 15px;" @onclick="SignUp">
                        Registration
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="content px-4">
        @Body

    </div>
</div>

@code
{
    public string CurrentUserLogin { get; set; }
    public string CurrentUserPassword { get; set; }

    public string UserLogin { get; set; }
    public string UserPassword { get; set; }



    public bool IsUserLogged { get; set; }

    bool userIsAuthorised = true;

    protected override async Task OnInitializedAsync()
    {
        //await storage.SetItemAsync<bool>("IsUserLogged", false);
        IsUserLogged = await storage.GetItemAsync<bool>("IsUserLogged");

    }

    async Task SignUp()
    {
        var connectionString = "mongodb://localhost";
        var client = new MongoClient(connectionString);
        var db = client.GetDatabase("TV_Shows");
        var collection = db.GetCollection<User>("Users");

        if (CurrentUserLogin != null && CurrentUserPassword != null)
        {
            if (collection.Find(x => x.CurrentUserLogin == CurrentUserLogin &&
                    x.CurrentUserPassword == CurrentUserPassword).CountDocuments() == 0)
            {
                await storage.SetItemAsync<bool>("CurrentUser", true);
                await storage.SetItemAsync<bool>("IsUserLogged", true);
                await storage.SetItemAsync<string>("UserLogin", CurrentUserLogin);
                await storage.SetItemAsync<string>("UserPassword", CurrentUserPassword);
                User.AddUserToDb(new User(CurrentUserLogin, CurrentUserPassword));
                manager.NavigateTo("/", true);
                userIsAuthorised = true;
            }
            else
            {
                userIsAuthorised = false;
                await storage.SetItemAsync<bool>("IsUserLogged", false);
                CurrentUserLogin = "";
                CurrentUserPassword = "";
                //await storage.RemoveItemAsync("UserLogin");
                //await storage.RemoveItemAsync("UserPassword");
            }
        }
    }

    async Task SignIn()
    {
        var connectionString = "mongodb://localhost";
        var client = new MongoClient(connectionString);
        var db = client.GetDatabase("TV_Shows");
        var collection = db.GetCollection<User>("Users");

        if(CurrentUserLogin != null && CurrentUserPassword != null)
        {
            if (collection.Find(x => x.CurrentUserLogin == CurrentUserLogin &&
                    x.CurrentUserPassword == CurrentUserPassword).CountDocuments() > 0)
            {
                User user = collection.Find(x => x.CurrentUserLogin == CurrentUserLogin &&
                x.CurrentUserPassword == CurrentUserPassword).First();
                await storage.SetItemAsync<User>("CurrentUser", user);
                await storage.SetItemAsync<bool>("IsUserLogged", true);
                await storage.SetItemAsync<string>("UserLogin", CurrentUserLogin);
                await storage.SetItemAsync<string>("UserPassword", CurrentUserPassword);
                manager.NavigateTo("/", true);
                userIsAuthorised = true;
            }
            else
            {
                userIsAuthorised = false;
                await storage.SetItemAsync<bool>("IsUserLogged", false);
                CurrentUserLogin = "";
                CurrentUserPassword = "";
                //await storage.RemoveItemAsync("UserLogin");
                //await storage.RemoveItemAsync("UserPassword");
            }
        }

    }

    async Task LogOut()
    {
        await storage.SetItemAsync<bool>("IsUserLogged", false);
        userIsAuthorised = false;
        manager.NavigateTo("/", true);
        //await storage.RemoveItemAsync("UserLogin");
        //await storage.RemoveItemAsync("UserPassword");
    }

}
