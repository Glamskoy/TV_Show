@inject Blazored.LocalStorage.ILocalStorageService storage
@inject NavigationManager manager
@using MongoDB.Driver

<div class="container" style="margin-top: 2px; margin-bottom: 2px;">
    <div class="row">
        <div class="col">
            <p class="text-left">@SerialSeason х @SeriesNumber</p>
        </div>
        <div class="col">
            <p class="text-left">@SeriesName</p>
        </div>
        <div class="col">
            <p class="text-right">
                @if (IsUserLogged)
                {
                    @if (serialIsSelected)
                    {
                        <input type="checkbox" @onchange="DeleteSeriesFromDB" checked />
                    }
                    else
                    {
                        <input type="checkbox" @onchange="FromBlazorToDB" />
                    }
                }
            </p>
        </div>
    </div>
</div>





@code {
    [Parameter] public UserSeries UserSeries { get; set; }
    public bool IsUserLogged { get; set; }
    public string UserLogin { get; set; }
    public string UserPassword { get; set; }

    [Parameter] public string UserSeriesLogin { get; set; }
    [Parameter] public string UserSeriesPassword { get; set; }
    [Parameter] public string SerialName { get; set; }
    [Parameter] public string SerialNameEng { get; set; }
    [Parameter] public int SerialSeason { get; set; }
    [Parameter] public int SeriesNumber { get; set; }
    [Parameter] public string SeriesName { get; set; }

    bool serialIsSelected;

    protected override async Task OnInitializedAsync()
    {
        //await storage.SetItemAsync<bool>("IsUserLogged", false);
        IsUserLogged = await storage.GetItemAsync<bool>("IsUserLogged");
        UserLogin = await storage.GetItemAsync<string>("UserLogin");
        UserPassword = await storage.GetItemAsync<string>("UserPassword");

        var connectionString = "mongodb://localhost";
        var client = new MongoClient(connectionString);
        var db = client.GetDatabase("TV_Shows");
        var collection = db.GetCollection<UserSeries>("UserSeries");

        if (collection.Find(x => x.UserSeriesLogin == UserLogin && x.UserSeriesPassword == UserPassword &&
                     x.SerialName == SerialName && x.SerialNameEng == SerialNameEng && x.SerialSeason == SerialSeason &&
                     x.SeriesNumber == SeriesNumber && x.SeriesName == SeriesName).CountDocuments() > 0)
            serialIsSelected = true;
        else
            serialIsSelected = false;
    }

    private void FromBlazorToDB()
    {
        var connectionString = "mongodb://localhost";
        var client = new MongoClient(connectionString);
        var db = client.GetDatabase("TV_Shows");
        var collection = db.GetCollection<UserSeries>("UserSeries");

        if (collection.Find(x => x.UserSeriesLogin == UserLogin && x.UserSeriesPassword == UserPassword &&
                    x.SerialName == SerialName && x.SerialNameEng == SerialNameEng && x.SerialSeason == SerialSeason &&
                    x.SeriesNumber == SeriesNumber && x.SeriesName == SeriesName).CountDocuments() == 0)
        {
            UserSeries.AddUserSeriesToDb(new UserSeries(UserLogin, UserPassword, SerialName, SerialNameEng, SerialSeason,
                SeriesNumber, SeriesName));
        }
        else
            DeleteSeriesFromDB();
    }

    private void DeleteSeriesFromDB()
    {
        var connectionString = "mongodb://localhost";
        var client = new MongoClient(connectionString);
        var db = client.GetDatabase("TV_Shows");
        var collection = db.GetCollection<UserSeries>("UserSeries");

        collection.DeleteOne(x => x.UserSeriesLogin == UserLogin &&
                    x.UserSeriesPassword == UserPassword && x.SerialName == SerialName &&
                    x.SerialNameEng == SerialNameEng && x.SerialSeason == SerialSeason &&
                    x.SeriesNumber == SeriesNumber && x.SeriesName == SeriesName);

        serialIsSelected = false;
    }
}