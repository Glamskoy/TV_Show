@page "/Profile"

@inject Blazored.LocalStorage.ILocalStorageService storage
@inject NavigationManager manager
@using MongoDB.Driver


<div class="row" style="margin-right: auto; margin-left: auto; background-color: aquamarine">
    <div calss="col" style="margin-left: 50px; margin-top: 50px; margin-bottom: 50px;">
        <div class="card border-info mb-0" style="max-width: 18rem; border-radius:10px;">
            <div class="card-body">
                <img src="/profile.png" class="card-img-top" alt="Profile">
            </div>
        </div>
    </div>
    <div class="col" style="margin-right: 50px; margin-left: 10px; margin-top: 50px; margin-bottom: 50px;">
        <h3 style="text-align: left;">Hello, @UserLogin!</h3>
        <div class="row" style="margin-left:auto; margin-right:auto;">
            <div class="col text-left">@episodsCount</div>
            <div class="col text-right">episodes</div>
        </div>
        <div class="progress" style="margin-bottom: 15px;">
            <div class="progress-bar" role="progressbar"
                 style="width: @episodString%" aria-valuenow="@episodsCount" aria-valuemin="0" aria-valuemax="@allEpisodsCount"></div>
        </div>
        <div class="row" style="margin-left:auto; margin-right:auto;">
            <div class="col text-left">@minutsCount</div>
            <div class="col text-right">minuts</div>
        </div>
        <div class="progress" style="margin-bottom: 15px;">
            <div class="progress-bar bg-success" role="progressbar"
                 style="width: @timeString%" aria-valuenow="@minutsCount" aria-valuemin="0" aria-valuemax="@allTimeCount"></div>
        </div>
        <div class="row" style="margin-left:auto; margin-right:auto;">
            <div class="col text-left">@hoursCount</div>
            <div class="col text-right">hours</div>
        </div>
        <div class="progress" style="margin-bottom: 15px;">
            <div class="progress-bar bg-danger" role="progressbar"
                 style="width: @hourString%" aria-valuenow="@hoursCount" aria-valuemin="0" aria-valuemax="@allHoursCount"></div>
        </div>
    </div>
</div>

@if (gotIsSelected)
{
    <div class="row" style="margin-right: auto; margin-left: auto;">
        <div class="col-3" style="margin-top: 10px;background-color: bisque; ">
            <a href="/GameofThrones">
                <img src="/got.jpg" alt="Game of Thrones" style="width: 280px; height: 180px;" />
            </a>
        </div>
        <div class="col" style="margin-top: 10px;margin-left: 10px; background-color: aqua; ">
            <div>
                <h3>
                    <a href="/GameofThrones">Game of Thrones</a>
                </h3>
            </div>
            <div class="row" style="margin-left:auto; margin-right:auto;">
                <div class="col text-right">@gotEpisodsCount / @GoTSeriesCount</div>
            </div>
            <div class="progress" style="height: 5px;">
                <div class="progress-bar" role="progressbar"
                     style="width: @gotEpisodsString%" aria-valuenow="@gotEpisodsCount" aria-valuemin="0"
                     aria-valuemax="@GoTSeriesCount"></div>
            </div>
        </div>
    </div>
}
@if (spnIsSelected)
{
    <div class="row" style="margin-right: auto; margin-left: auto;">
        <div class="col-3" style="margin-top: 10px; background-color: bisque; ">
            <a href="/Supernatural">
                <img src="/spn.jpg" alt="Supernatural" style="width: 280px; height: 180px;" />
            </a>
        </div>
        <div class="col" style="margin-top: 10px; margin-left: 10px; background-color: aqua; ">
            <div>
                <h3>
                    <a href="/Supernatural">Supernatural</a>
                </h3>
            </div>
            <div class="row" style="margin-left:auto; margin-right:auto;">
                <div class="col text-right">@spnEpisodsCount / @SpnSeriesCount</div>
            </div>
            <div class="progress" style="height: 5px;">
                <div class="progress-bar" role="progressbar"
                     style="width: @spnEpisodsString%" aria-valuenow="@spnEpisodsCount" aria-valuemin="0"
                     aria-valuemax="@SpnSeriesCount"></div>
            </div>
        </div>
    </div>
}
@if (tbbtIsSelected)
{
    <div class="row" style="margin-right: auto; margin-left: auto;">
        <div class="col-3" style="margin-top: 10px; background-color: bisque; ">
            <a href="/TheBigBangTheory">
                <img src="/tbbt.jpg" alt="The Big Bang Theory" style="width: 280px; height: 180px;" />
            </a>
        </div>
        <div class="col" style="margin-top: 10px; margin-left: 10px; background-color: aqua; ">
            <div>
                <h3>
                    <a href="/TheBigBangTheory">The Big Bang Theory</a>
                </h3>
            </div>
            <div class="row" style="margin-left:auto; margin-right:auto;">
                <div class="col text-right">@tbbtEpisodsCount / @TBBTSeriesCount</div>
            </div>
            <div class="progress" style="height: 5px;">
                <div class="progress-bar" role="progressbar"
                     style="width: @tbbtEpisodsString%" aria-valuenow="@tbbtEpisodsCount" aria-valuemin="0"
                     aria-valuemax="@TBBTSeriesCount"></div>
            </div>
        </div>
    </div>
}



@code {
    public bool IsUserLogged { get; set; }
    public string UserLogin { get; set; }
    public string UserPassword { get; set; }

    public bool UserWatch { get; set; }
    public bool UserWillWatch { get; set; }
    public bool UserStopWatch { get; set; }
    public bool UserDoesntWatch { get; set; }

    public int GoTSeriesCount { get; set; }
    public int SpnSeriesCount { get; set; }
    public int TBBTSeriesCount { get; set; }

    public int GoTTimeCount { get; set; }
    public int SpnTimeCount { get; set; }
    public int TBBTTimeCount { get; set; }

    //User user1 = new User();

    List<UserSeries> user = new List<UserSeries>();
    List<UserSeries> user1 = new List<UserSeries>();

    int allEpisodsCount = 0;
    int allTimeCount = 0;
    int allHoursCount;

    int episodsCount;
    int minutsCount = 0;
    int hoursCount = 0;

    int episodString;
    int timeString;
    int hourString;

    int gotEpisodsCount;
    int gotEpisodsString;
    bool gotIsSelected = false;

    int spnEpisodsCount;
    int spnEpisodsString;
    bool spnIsSelected = false;

    int tbbtEpisodsCount;
    int tbbtEpisodsString;
    bool tbbtIsSelected = false;

    bool userIsAuthorised = true;


    protected override async Task OnInitializedAsync()
    {
        IsUserLogged = await storage.GetItemAsync<bool>("IsUserLogged");
        UserLogin = await storage.GetItemAsync<string>("UserLogin");
        UserPassword = await storage.GetItemAsync<string>("UserPassword");

        GoTSeriesCount = await storage.GetItemAsync<int>("GoTSeriesCount");
        SpnSeriesCount = await storage.GetItemAsync<int>("SpnSeriesCount");
        TBBTSeriesCount = await storage.GetItemAsync<int>("TBBTSeriesCount");

        GoTTimeCount = await storage.GetItemAsync<int>("GoTTimeCount");
        SpnTimeCount = await storage.GetItemAsync<int>("SpnTimeCount");
        TBBTTimeCount = await storage.GetItemAsync<int>("TBBTTimeCount");

        var connectionString1 = "mongodb://localhost";
        var client1 = new MongoClient(connectionString1);
        var db1 = client1.GetDatabase("TV_Shows");
        var collection1 = db1.GetCollection<UserSeries>("UserSeries");

        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
     x.UserSeriesPassword == UserPassword && x.SerialName == "Game of Thrones").CountDocuments() > 0)
        {
            allEpisodsCount += GoTSeriesCount;
            allTimeCount += GoTTimeCount;
            if (allTimeCount >= 60)
                allHoursCount = allTimeCount / 60;
        }

        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
        x.UserSeriesPassword == UserPassword && x.SerialName == "The Big Bang Theory").CountDocuments() > 0)
        {
            allEpisodsCount += TBBTSeriesCount;
            allTimeCount += TBBTTimeCount;
            if (allTimeCount >= 60)
                allHoursCount = allTimeCount / 60;
        }

        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
        x.UserSeriesPassword == UserPassword && x.SerialName == "Supernatural").CountDocuments() > 0)
        {
            allEpisodsCount += SpnSeriesCount;
            allTimeCount += SpnTimeCount;
            if (allTimeCount >= 60)
                allHoursCount = allTimeCount / 60;
        }

        episodsCount = Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword).CountDocuments());

        minutsCount += 57 * Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialName == "Game of Thrones").CountDocuments());

        minutsCount += 43 * Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialName == "Supernatural").CountDocuments());

        minutsCount += 22 * Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialName == "The Big Bang Theory").CountDocuments());

        if (minutsCount >= 60)
            hoursCount = minutsCount / 60;

        episodString = episodsCount * 100 / allEpisodsCount;
        timeString = minutsCount * 100 / allTimeCount;
        hourString = hoursCount * 100 / allHoursCount;

        gotEpisodsCount = Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialName == "Game of Thrones").CountDocuments());
        gotEpisodsString = gotEpisodsCount * 100 / GoTSeriesCount;
        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialName == "Game of Thrones").CountDocuments() > 0)
            gotIsSelected = true;

        spnEpisodsCount = Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialName == "Supernatural").CountDocuments());
        spnEpisodsString = spnEpisodsCount * 100 / SpnSeriesCount;
        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialName == "Supernatural").CountDocuments() > 0)
            spnIsSelected = true;

        tbbtEpisodsCount = Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialName == "The Big Bang Theory").CountDocuments());
        tbbtEpisodsString = tbbtEpisodsCount * 100 / TBBTSeriesCount;
        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialName == "The Big Bang Theory").CountDocuments() > 0)
            tbbtIsSelected = true;

        var connectionString = "mongodb://localhost";
        var client = new MongoClient(connectionString);
        var db = client.GetDatabase("TV_Shows");
        var collection = db.GetCollection<UserSeries>("UserSeries").AsQueryable();
        foreach (var item in collection)
        {
            UserSeries x = new UserSeries();
            x.UserSeriesLogin = item.UserSeriesLogin;
            x.UserSeriesPassword = item.UserSeriesPassword;
            x.SerialName = item.SerialName;
            user.Add(x);
        }
        foreach (var item in collection)
        {
            UserSeries x = new UserSeries();
            x.UserSeriesLogin = item.UserSeriesLogin;
            x.UserSeriesPassword = item.UserSeriesPassword;
            x.SerialName = item.SerialName;
            x.SerialSeason = item.SerialSeason;
            x.SeriesNumber = item.SeriesNumber;
            x.SeriesName = item.SeriesName;
            user1.Add(x);
        }
    }
}
