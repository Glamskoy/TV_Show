@page "/Profile"

@inject Blazored.LocalStorage.ILocalStorageService storage
@inject NavigationManager manager
@using MongoDB.Driver


<div class="row" style="margin-right: auto; margin-left: auto;">
    <div calss="col" style="margin-left: 50px; margin-top: 50px; margin-bottom: 50px;">
        <div class="card border-info mb-0" style="max-width: 18rem; border-radius:10px;">
            <div class="card-body">
                <img src="/profile.png" class="card-img-top" alt="Profile">
            </div>
        </div>
    </div>
    <div class="col" style="margin-right: 50px; margin-left: 10px; margin-top: 50px; margin-bottom: 50px;">
        <h3 style="text-align: left;">Добро пожаловать, @UserLogin</h3>
        <div class="row" style="margin-left:auto; margin-right:auto;">
            <div class="col text-left">@episodsCount</div>
            @if (episodsCount % 10 == 1 && episodsCount != 11 && episodsCount % 10 != 11)
            {
                <div class="col text-right">эпизод</div>
            }
            @if ((episodsCount % 10 == 2 || episodsCount % 10 == 3 || episodsCount % 10 == 4) &&
              episodsCount != 12 && episodsCount != 13 && episodsCount != 14)
            {
                <div class="col text-right">эпизода</div>
            }
            @if (episodsCount % 10 == 0 || episodsCount % 10 == 5 || episodsCount % 10 == 6 ||
               episodsCount % 10 == 7 || episodsCount % 10 == 8 || episodsCount % 10 == 9 ||
               episodsCount == 11 || episodsCount == 12 || episodsCount == 13 ||
               episodsCount == 14 || episodsCount == 15 || episodsCount == 16 ||
               episodsCount == 17 || episodsCount == 18 || episodsCount == 19 ||
               episodsCount % 10 == 11 || episodsCount % 10 == 12 || episodsCount % 10 == 13 ||
               episodsCount % 10 == 14 || episodsCount % 10 == 15 || episodsCount % 10 == 16 ||
               episodsCount % 10 == 17 || episodsCount % 10 == 18 || episodsCount % 10 == 19)
            {
                <div class="col text-right">эпизодов</div>
            }
        </div>
        <div class="progress" style="margin-bottom: 15px;">
            <div class="progress-bar" role="progressbar"
                 style="width: @episodString%" aria-valuenow="@episodsCount" aria-valuemin="0" aria-valuemax="@allEpisodsCount"></div>
        </div>
        <div class="row" style="margin-left:auto; margin-right:auto;">
            <div class="col text-left">@minutsCount</div>
            @if (minutsCount % 10 == 1 && minutsCount != 11 && minutsCount % 10 != 11)
            {
                <div class="col text-right">минута</div>
            }
            @if ((minutsCount % 10 == 2 || minutsCount % 10 == 3 || minutsCount % 10 == 4) &&
             minutsCount != 12 && minutsCount != 13 && minutsCount != 14)
            {
                <div class="col text-right">минуты</div>
            }
            @if (minutsCount % 10 == 0 || minutsCount % 10 == 5 || minutsCount % 10 == 6 ||
              minutsCount % 10 == 7 || minutsCount % 10 == 8 || minutsCount % 10 == 9 ||
              minutsCount == 11 || minutsCount == 12 || minutsCount == 13 ||
              minutsCount == 14 || minutsCount == 15 || minutsCount == 16 ||
              minutsCount == 17 || minutsCount == 18 || minutsCount == 19 ||
              minutsCount % 10 == 11 || minutsCount % 10 == 12 || minutsCount % 10 == 13 ||
              minutsCount % 10 == 14 || minutsCount % 10 == 15 || minutsCount % 10 == 16 ||
              minutsCount % 10 == 17 || minutsCount % 10 == 18 || minutsCount % 10 == 19)
            {
                <div class="col text-right">минут</div>
            }
        </div>
        <div class="progress" style="margin-bottom: 15px;">
            <div class="progress-bar bg-success" role="progressbar"
                 style="width: @timeString%" aria-valuenow="@minutsCount" aria-valuemin="0" aria-valuemax="@allTimeCount"></div>
        </div>
        <div class="row" style="margin-left:auto; margin-right:auto;">
            <div class="col text-left">@hoursCount</div>
            @if (hoursCount % 10 == 1 && hoursCount != 11 && hoursCount % 10 != 11)
            {
                <div class="col text-right">час</div>
            }
            @if ((hoursCount % 10 == 2 || hoursCount % 10 == 3 || hoursCount % 10 == 4) &&
          hoursCount != 12 && hoursCount != 13 && hoursCount != 14)
            {
                <div class="col text-right">часа</div>
            }
            @if (hoursCount % 10 == 0 || hoursCount % 10 == 5 || hoursCount % 10 == 6 ||
             hoursCount % 10 == 7 || hoursCount % 10 == 8 || hoursCount % 10 == 9 ||
             hoursCount == 11 || hoursCount == 12 || hoursCount == 13 ||
             hoursCount == 14 || hoursCount == 15 || hoursCount == 16 ||
             hoursCount == 17 || hoursCount == 18 || hoursCount == 19 ||
             hoursCount % 10 == 11 || hoursCount % 10 == 12 || hoursCount % 10 == 13 ||
             hoursCount % 10 == 14 || hoursCount % 10 == 15 || hoursCount % 10 == 16 ||
             hoursCount % 10 == 17 || hoursCount % 10 == 18 || hoursCount % 10 == 19)
            {
                <div class="col text-right">часов</div>
            }
        </div>
        <div class="progress" style="margin-bottom: 15px;">
            <div class="progress-bar bg-danger" role="progressbar"
                 style="width: @hourString%" aria-valuenow="@hoursCount" aria-valuemin="0" aria-valuemax="@allHoursCount"></div>
        </div>
    </div>
</div>

@if (gotIsSelected)
{
    <div class="row" style="margin-right: auto; margin-left: auto;">
        <div class="col-3" style="margin-top: 10px; padding-left: 0; margin-left: 50px;">
            <a href="/GameofThrones">
                <img src="/got.jpg" alt="Game of Thrones" style="width: 280px; height: 170px;" />
            </a>
        </div>
        <div class="col" style="margin-top: 10px; margin-right:50px;">
            <div class="row" style="margin-top: 10px; margin-left: auto; margin-right: auto;">
                <div>
                    <h3>
                        <a href="/GameofThrones">Игра престолов</a>
                    </h3>
                    <small>Game of Thrones</small>
                </div>
            </div>
            <div class="row" style="margin-left: auto; margin-right: auto;">
                <div class="rate" style="padding-left:0;">
                    @if (currentUserRatingGoT == 5)
                    {
                        <input type="radio" checked id="star5" name="rateGoT" value="5" @onclick="Rating5GoT" />
                        <label for="star5" title="text">5 stars</label>
                    }
                    else
                    {
                        <input type="radio" id="star5" name="rateGoT" value="5" @onclick="Rating5GoT" />
                        <label for="star5" title="text">5 stars</label>
                    }
                    @if (currentUserRatingGoT == 4)
                    {
                        <input type="radio" checked id="star4" name="rateGoT" value="4" @onclick="Rating4GoT" />
                        <label for="star4" title="text">4 stars</label>
                    }
                    else
                    {
                        <input type="radio" id="star4" name="rateGoT" value="4" @onclick="Rating4GoT" />
                        <label for="star4" title="text">4 stars</label>
                    }
                    @if (currentUserRatingGoT == 3)
                    {
                        <input type="radio" checked id="star3" name="rateGoT" value="3" @onclick="Rating3GoT" />
                        <label for="star3" title="text">3 stars</label>
                    }
                    else
                    {
                        <input type="radio" id="star3" name="rateGoT" value="3" @onclick="Rating3GoT" />
                        <label for="star3" title="text">3 stars</label>
                    }
                    @if (currentUserRatingGoT == 2)
                    {
                        <input type="radio" checked id="star2" name="rateGoT" value="2" @onclick="Rating2GoT" />
                        <label for="star2" title="text">2 stars</label>
                    }
                    else
                    {
                        <input type="radio" id="star2" name="rateGoT" value="2" @onclick="Rating2GoT" />
                        <label for="star2" title="text">2 stars</label>
                    }
                    @if (currentUserRatingGoT == 1)
                    {
                        <input type="radio" checked id="star1" name="rateGoT" value="1" @onclick="Rating1GoT" />
                        <label for="star1" title="text">1 star</label>
                    }
                    else
                    {
                        <input type="radio" id="star1" name="rateGoT" value="1" @onclick="Rating1GoT" />
                        <label for="star1" title="text">1 star</label>
                    }
                </div>
            </div>
            <div class="row" style="margin-left:auto; margin-right:auto;">
                <div class="col text-right">@gotEpisodsCount из @GoTSeriesCount</div>
            </div>
            <div class="progress" style="height: 5px;">
                <div class="progress-bar" role="progressbar"
                     style="width: @gotEpisodsString%" aria-valuenow="@gotEpisodsCount" aria-valuemin="0"
                     aria-valuemax="@GoTSeriesCount"></div>
            </div>
        </div>
    </div>
}
@if (spnIsSelected)
{
    <div class="row" style="margin-right: auto; margin-left: auto;">
        <div class="col-3" style="margin-top: 10px; padding-left: 0; margin-left: 50px;">
            <a href="/Supernatural">
                <img src="/spn.jpg" alt="Supernatural" style="width: 280px; height: 170px;" />
            </a>
        </div>
        <div class="col" style="margin-top: 10px; margin-right: 50px;">
            <div class="row" style="margin-top: 10px; margin-left: auto; margin-right: auto;">
                <div>
                    <h3>
                        <a href="/Supernatural">Сверхъестественное</a>
                    </h3>
                    <small>Supernatural</small>
                </div>
            </div>
            <div class="row" style="margin-left: auto; margin-right: auto;">
                <div class="rate" style="padding-left:0;">
                    @if (currentUserRatingSpn == 5)
                    {
                        <input type="radio" checked id="star5" name="rateSpn" value="5" @onclick="Rating5Spn" />
                        <label for="star5" title="text">5 stars</label>
                    }
                    else
                    {
                        <input type="radio" id="star5" name="rateSpn" value="5" @onclick="Rating5Spn" />
                        <label for="star5" title="text">5 stars</label>
                    }
                    @if (currentUserRatingSpn == 4)
                    {
                        <input type="radio" checked id="star4" name="rateSpn" value="4" @onclick="Rating4Spn" />
                        <label for="star4" title="text">4 stars</label>
                    }
                    else
                    {
                        <input type="radio" id="star4" name="rateSpn" value="4" @onclick="Rating4Spn" />
                        <label for="star4" title="text">4 stars</label>
                    }
                    @if (currentUserRatingSpn == 3)
                    {
                        <input type="radio" checked id="star3" name="rateSpn" value="3" @onclick="Rating3Spn" />
                        <label for="star3" title="text">3 stars</label>
                    }
                    else
                    {
                        <input type="radio" id="star3" name="rateSpn" value="3" @onclick="Rating3Spn" />
                        <label for="star3" title="text">3 stars</label>
                    }
                    @if (currentUserRatingSpn == 2)
                    {
                        <input type="radio" checked id="star2" name="rateSpn" value="2" @onclick="Rating2Spn" />
                        <label for="star2" title="text">2 stars</label>
                    }
                    else
                    {
                        <input type="radio" id="star2" name="rateSpn" value="2" @onclick="Rating2Spn" />
                        <label for="star2" title="text">2 stars</label>
                    }
                    @if (currentUserRatingSpn == 1)
                    {
                        <input type="radio" checked id="star1" name="rateSpn" value="1" @onclick="Rating1Spn" />
                        <label for="star1" title="text">1 star</label>
                    }
                    else
                    {
                        <input type="radio" id="star1" name="rateSpn" value="1" @onclick="Rating1Spn" />
                        <label for="star1" title="text">1 star</label>
                    }
                </div>
            </div>
            <div class="row" style="margin-left:auto; margin-right:auto;">
                <div class="col text-right">@spnEpisodsCount из @SpnSeriesCount</div>
            </div>
            <div class="progress" style="height: 5px;">
                <div class="progress-bar" role="progressbar"
                     style="width: @spnEpisodsString%" aria-valuenow="@spnEpisodsCount" aria-valuemin="0"
                     aria-valuemax="@SpnSeriesCount"></div>
            </div>
        </div>
    </div>
}
@if (tbbtIsSelected)
{
    <div class="row" style="margin-right: auto; margin-left: auto;">
        <div class="col-3" style="margin-top: 10px; padding-left: 0; margin-left: 50px;">
            <a href="/TheBigBangTheory">
                <img src="/tbbt.jpg" alt="The Big Bang Theory" style="width: 280px; height: 170px;" />
            </a>
        </div>
        <div class="col" style="margin-top: 10px; margin-right: 50px;">
            <div class="row" style="margin-top: 10px; margin-left: auto; margin-right: auto;">
                <div>
                    <h3>
                        <a href="/TheBigBangTheory">Теория большого взрыва</a>
                    </h3>
                    <small>The Big Bang Theory</small>
                </div>
            </div>
            <div class="row" style="margin-left: auto; margin-right: auto;">
                <div class="rate" style="padding-left:0;">
                    @if (currentUserRatingTBBT == 5)
                    {
                        <input type="radio" checked id="star5" name="rateTBBT" value="5" @onclick="Rating5TBBT" />
                        <label for="star5" title="text">5 stars</label>
                    }
                    else
                    {
                        <input type="radio" id="star5" name="rateTBBT" value="5" @onclick="Rating5TBBT" />
                        <label for="star5" title="text">5 stars</label>
                    }
                    @if (currentUserRatingTBBT == 4)
                    {
                        <input type="radio" checked id="star4" name="rateTBBT" value="4" @onclick="Rating4TBBT" />
                        <label for="star4" title="text">4 stars</label>
                    }
                    else
                    {
                        <input type="radio" id="star4" name="rateTBBT" value="4" @onclick="Rating4TBBT" />
                        <label for="star4" title="text">4 stars</label>
                    }
                    @if (currentUserRatingTBBT == 3)
                    {
                        <input type="radio" checked id="star3" name="rateTBBT" value="3" @onclick="Rating3TBBT" />
                        <label for="star3" title="text">3 stars</label>
                    }
                    else
                    {
                        <input type="radio" id="star3" name="rateTBBT" value="3" @onclick="Rating3TBBT" />
                        <label for="star3" title="text">3 stars</label>
                    }
                    @if (currentUserRatingTBBT == 2)
                    {
                        <input type="radio" checked id="star2" name="rateTBBT" value="2" @onclick="Rating2TBBT" />
                        <label for="star2" title="text">2 stars</label>
                    }
                    else
                    {
                        <input type="radio" id="star2" name="rateTBBT" value="2" @onclick="Rating2TBBT" />
                        <label for="star2" title="text">2 stars</label>
                    }
                    @if (currentUserRatingTBBT == 1)
                    {
                        <input type="radio" checked id="star1" name="rateTBBT" value="1" @onclick="Rating1TBBT" />
                        <label for="star1" title="text">1 star</label>
                    }
                    else
                    {
                        <input type="radio" id="star1" name="rateTBBT" value="1" @onclick="Rating1TBBT" />
                        <label for="star1" title="text">1 star</label>
                    }
                </div>
            </div>
            <div class="row" style="margin-left:auto; margin-right:auto;">
                <div class="col text-right">@tbbtEpisodsCount из @TBBTSeriesCount</div>
            </div>
            <div class="progress" style="height: 5px;">
                <div class="progress-bar" role="progressbar"
                     style="width: @tbbtEpisodsString%" aria-valuenow="@tbbtEpisodsCount" aria-valuemin="0"
                     aria-valuemax="@TBBTSeriesCount"></div>
            </div>
        </div>
    </div>
}



@code {
    public bool IsUserLogged { get; set; }
    public string UserLogin { get; set; }
    public string UserPassword { get; set; }

    public bool UserWatch { get; set; }
    public bool UserWillWatch { get; set; }
    public bool UserStopWatch { get; set; }
    public bool UserDoesntWatch { get; set; }

    public int CurrentUserRatingGoT { get; set; }
    public int CurrentUserRatingSpn { get; set; }
    public int CurrentUserRatingTBBT { get; set; }
    int currentUserRatingGoT;
    int currentUserRatingSpn;
    int currentUserRatingTBBT;

    public int GoTSeriesCount { get; set; }
    public int SpnSeriesCount { get; set; }
    public int TBBTSeriesCount { get; set; }

    public int GoTTimeCount { get; set; }
    public int SpnTimeCount { get; set; }
    public int TBBTTimeCount { get; set; }

    //User user1 = new User();

    List<UserSeries> user = new List<UserSeries>();
    List<UserSeries> user1 = new List<UserSeries>();

    int allEpisodsCount = 0;
    int allTimeCount = 0;
    int allHoursCount = 0;

    int episodsCount;
    int minutsCount = 0;
    int hoursCount = 0;

    int episodString;
    int timeString;
    int hourString;

    int gotEpisodsCount;
    int gotEpisodsString;
    bool gotIsSelected = false;

    int spnEpisodsCount;
    int spnEpisodsString;
    bool spnIsSelected = false;

    int tbbtEpisodsCount;
    int tbbtEpisodsString;
    bool tbbtIsSelected = false;

    bool userIsAuthorised = true;


    protected override async Task OnInitializedAsync()
    {
        IsUserLogged = await storage.GetItemAsync<bool>("IsUserLogged");
        UserLogin = await storage.GetItemAsync<string>("UserLogin");
        UserPassword = await storage.GetItemAsync<string>("UserPassword");

        UserWatch = await storage.GetItemAsync<bool>("UserWatch");
        UserWillWatch = await storage.GetItemAsync<bool>("UserWillWatch");
        UserStopWatch = await storage.GetItemAsync<bool>("UserStopWatch");
        UserDoesntWatch = await storage.GetItemAsync<bool>("UserDoesntWatch");

        GoTSeriesCount = await storage.GetItemAsync<int>("GoTSeriesCount");
        SpnSeriesCount = await storage.GetItemAsync<int>("SpnSeriesCount");
        TBBTSeriesCount = await storage.GetItemAsync<int>("TBBTSeriesCount");

        GoTTimeCount = await storage.GetItemAsync<int>("GoTTimeCount");
        SpnTimeCount = await storage.GetItemAsync<int>("SpnTimeCount");
        TBBTTimeCount = await storage.GetItemAsync<int>("TBBTTimeCount");

        var connectionString1 = "mongodb://localhost";
        var client1 = new MongoClient(connectionString1);
        var db1 = client1.GetDatabase("TV_Shows");
        var collection1 = db1.GetCollection<UserSeries>("UserSeries");

        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Game of Thrones").CountDocuments() > 0)
        {
            allEpisodsCount += GoTSeriesCount;
            allTimeCount += GoTTimeCount;
            if (allTimeCount >= 60)
                allHoursCount = allTimeCount / 60;
        }

        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "The Big Bang Theory").CountDocuments() > 0)
        {
            allEpisodsCount += TBBTSeriesCount;
            allTimeCount += TBBTTimeCount;
            if (allTimeCount >= 60)
                allHoursCount = allTimeCount / 60;
        }

        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Supernatural").CountDocuments() > 0)
        {
            allEpisodsCount += SpnSeriesCount;
            allTimeCount += SpnTimeCount;
            if (allTimeCount >= 60)
                allHoursCount = allTimeCount / 60;
        }

        episodsCount = Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword).CountDocuments());

        minutsCount += 57 * Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Game of Thrones").CountDocuments());

        minutsCount += 43 * Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Supernatural").CountDocuments());

        minutsCount += 22 * Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "The Big Bang Theory").CountDocuments());

        if (minutsCount >= 60)
            hoursCount = minutsCount / 60;

        if (allEpisodsCount > 0)
            episodString = episodsCount * 100 / allEpisodsCount;
        else
            episodString = 0;
        if (allTimeCount > 0)
            timeString = minutsCount * 100 / allTimeCount;
        else
            timeString = 0;
        if (allHoursCount > 0)
            hourString = hoursCount * 100 / allHoursCount;
        else
            hourString = 0;

        gotEpisodsCount = Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
        x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Game of Thrones").CountDocuments());
        gotEpisodsString = gotEpisodsCount * 100 / GoTSeriesCount;
        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Game of Thrones").CountDocuments() > 0)
            gotIsSelected = true;

        spnEpisodsCount = Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Supernatural").CountDocuments());
        spnEpisodsString = spnEpisodsCount * 100 / SpnSeriesCount;
        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Supernatural").CountDocuments() > 0)
            spnIsSelected = true;

        tbbtEpisodsCount = Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "The Big Bang Theory").CountDocuments());
        tbbtEpisodsString = tbbtEpisodsCount * 100 / TBBTSeriesCount;
        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "The Big Bang Theory").CountDocuments() > 0)
            tbbtIsSelected = true;

        var connectionStringUserRating = "mongodb://localhost";
        var clientUserRating = new MongoClient(connectionStringUserRating);
        var dbUserRating = clientUserRating.GetDatabase("TV_Shows");
        var collectionUserRating = dbUserRating.GetCollection<UserRating>("UserRating");
        if (collectionUserRating.Find(x => x.SerialNameEng == "Game of Thrones"
            && x.UserRatingLogin == UserLogin).CountDocuments() > 0)
        {
            UserRating ur = new UserRating();
            ur.SingleUserRating = collectionUserRating.Find(x => x.SerialNameEng == "Game of Thrones" &&
                x.UserRatingLogin == UserLogin).FirstOrDefault().SingleUserRating;
            currentUserRatingGoT = ur.SingleUserRating;
        }
        await storage.SetItemAsync<int>("CurrentUserRatingGoT", currentUserRatingGoT);
        CurrentUserRatingGoT = await storage.GetItemAsync<int>("CurrentUserRatingGoT");

        if (collectionUserRating.Find(x => x.SerialNameEng == "Supernatural"
                    && x.UserRatingLogin == UserLogin).CountDocuments() > 0)
        {
            UserRating ur = new UserRating();
            ur.SingleUserRating = collectionUserRating.Find(x => x.SerialNameEng == "Supernatural" &&
                x.UserRatingLogin == UserLogin).FirstOrDefault().SingleUserRating;
            currentUserRatingSpn = ur.SingleUserRating;
        }
        await storage.SetItemAsync<int>("CurrentUserRatingSpn", currentUserRatingSpn);
        CurrentUserRatingSpn = await storage.GetItemAsync<int>("CurrentUserRatingSpn");

        if (collectionUserRating.Find(x => x.SerialNameEng == "The Big Bang Theory"
        && x.UserRatingLogin == UserLogin).CountDocuments() > 0)
        {
            UserRating ur = new UserRating();
            ur.SingleUserRating = collectionUserRating.Find(x => x.SerialNameEng == "The Big Bang Theory" &&
                x.UserRatingLogin == UserLogin).FirstOrDefault().SingleUserRating;
            currentUserRatingTBBT = ur.SingleUserRating;
        }
        await storage.SetItemAsync<int>("CurrentUserRatingTBBT", currentUserRatingTBBT);
        CurrentUserRatingTBBT = await storage.GetItemAsync<int>("CurrentUserRatingTBBT");
    }

    async Task RatingGoT(int rating)
    {
        await storage.SetItemAsync<int>("CurrentUserRatingGoT", rating);
        CurrentUserRatingGoT = await storage.GetItemAsync<int>("CurrentUserRatingGoT");

        var connectionStringUserRating = "mongodb://localhost";
        var clientUserRating = new MongoClient(connectionStringUserRating);
        var dbUserRating = clientUserRating.GetDatabase("TV_Shows");
        var collectionUserRating = dbUserRating.GetCollection<UserRating>("UserRating");
        if (collectionUserRating.Find(x => x.UserRatingLogin == UserLogin &&
                x.UserRatingPassword == UserPassword && x.SerialNameEng == "Game of Thrones").CountDocuments() == 0)
        {
            UserRating.AddUserRatingToDb(new UserRating(UserLogin, UserPassword, "Game of Thrones",
                CurrentUserRatingGoT));
        }
        else
        {
            if (collectionUserRating.Find(x => x.SingleUserRating != CurrentUserRatingGoT).CountDocuments() > 0)
            {
                collectionUserRating.DeleteOne(x => x.UserRatingLogin == UserLogin &&
                x.UserRatingPassword == UserPassword && x.SerialNameEng == "Game of Thrones" &&
                x.SingleUserRating != CurrentUserRatingGoT);

                UserRating.AddUserRatingToDb(new UserRating(UserLogin, UserPassword, "Game of Thrones",
                    CurrentUserRatingGoT));
            }
        }
    }

    private void Rating5GoT()
    {
        currentUserRatingGoT = 5;
        RatingGoT(currentUserRatingGoT);
    }

    private void Rating4GoT()
    {
        currentUserRatingGoT = 4;
        RatingGoT(currentUserRatingGoT);

    }

    private void Rating3GoT()
    {
        currentUserRatingGoT = 3;
        RatingGoT(currentUserRatingGoT);
    }

    private void Rating2GoT()
    {
        currentUserRatingGoT = 2;
        RatingGoT(currentUserRatingGoT);
    }

    private void Rating1GoT()
    {
        currentUserRatingGoT = 1;
        RatingGoT(currentUserRatingGoT);
    }

    async Task RatingSpn(int rating)
    {
        await storage.SetItemAsync<int>("CurrentUserRatingSpn", rating);
        CurrentUserRatingSpn = await storage.GetItemAsync<int>("CurrentUserRatingSpn");

        var connectionStringUserRating = "mongodb://localhost";
        var clientUserRating = new MongoClient(connectionStringUserRating);
        var dbUserRating = clientUserRating.GetDatabase("TV_Shows");
        var collectionUserRating = dbUserRating.GetCollection<UserRating>("UserRating");

        if (collectionUserRating.Find(x => x.UserRatingLogin == UserLogin &&
            x.UserRatingPassword == UserPassword && x.SerialNameEng == "Supernatural").CountDocuments() == 0)
        {
            UserRating.AddUserRatingToDb(new UserRating(UserLogin, UserPassword, "Supernatural",
                CurrentUserRatingSpn));
        }
        else
        {
            if (collectionUserRating.Find(x => x.SingleUserRating != CurrentUserRatingSpn).CountDocuments() > 0)
            {
                collectionUserRating.DeleteOne(x => x.UserRatingLogin == UserLogin &&
                x.UserRatingPassword == UserPassword && x.SerialNameEng == "Supernatural" &&
                x.SingleUserRating != CurrentUserRatingSpn);

                UserRating.AddUserRatingToDb(new UserRating(UserLogin, UserPassword, "Supernatural",
                    CurrentUserRatingSpn));
            }
        }
    }

    private void Rating5Spn()
    {
        currentUserRatingSpn = 5;
        RatingSpn(currentUserRatingSpn);
    }

    private void Rating4Spn()
    {
        currentUserRatingSpn = 4;
        RatingSpn(currentUserRatingSpn);
    }

    private void Rating3Spn()
    {
        currentUserRatingSpn = 3;
        RatingSpn(currentUserRatingSpn);
    }

    private void Rating2Spn()
    {
        currentUserRatingSpn = 2;
        RatingSpn(currentUserRatingSpn);
    }

    private void Rating1Spn()
    {
        currentUserRatingSpn = 1;
        RatingSpn(currentUserRatingSpn);
    }

    async Task RatingTBBT(int rating)
    {
        await storage.SetItemAsync<int>("CurrentUserRatingTBBT", rating);
        CurrentUserRatingTBBT = await storage.GetItemAsync<int>("CurrentUserRatingTBBT");

        var connectionStringUserRating = "mongodb://localhost";
        var clientUserRating = new MongoClient(connectionStringUserRating);
        var dbUserRating = clientUserRating.GetDatabase("TV_Shows");
        var collectionUserRating = dbUserRating.GetCollection<UserRating>("UserRating");

        if (collectionUserRating.Find(x => x.UserRatingLogin == UserLogin &&
            x.UserRatingPassword == UserPassword && x.SerialNameEng == "The Big Bang Theory").CountDocuments() == 0)
        {
            UserRating.AddUserRatingToDb(new UserRating(UserLogin, UserPassword, "The Big Bang Theory",
              CurrentUserRatingTBBT));
        }
        else
        {
            if (collectionUserRating.Find(x => x.SingleUserRating != CurrentUserRatingTBBT).CountDocuments() > 0)
            {
                collectionUserRating.DeleteOne(x => x.UserRatingLogin == UserLogin &&
                x.UserRatingPassword == UserPassword && x.SerialNameEng == "The Big Bang Theory" &&
                x.SingleUserRating != CurrentUserRatingTBBT);

                UserRating.AddUserRatingToDb(new UserRating(UserLogin, UserPassword, "The Big Bang Theory",
                    CurrentUserRatingTBBT));
            }
        }
    }

    private void Rating5TBBT()
    {
        currentUserRatingTBBT = 5;
        RatingTBBT(currentUserRatingTBBT);
    }

    private void Rating4TBBT()
    {
        currentUserRatingTBBT = 4;
        RatingTBBT(currentUserRatingTBBT);
    }

    private void Rating3TBBT()
    {
        currentUserRatingTBBT = 3;
        RatingTBBT(currentUserRatingTBBT);
    }

    private void Rating2TBBT()
    {
        currentUserRatingTBBT = 2;
        RatingTBBT(currentUserRatingTBBT);
    }

    private void Rating1TBBT()
    {
        currentUserRatingTBBT = 1;
        RatingTBBT(currentUserRatingTBBT);
    }
}
