@page "/"
@using System.Threading;

<div class="row">
    <div class="col text-center">
        <h1>Your recommendations</h1>
    </div>
</div>

<br />

<div class="container" style="margin-left: auto; margin-right: auto; position: relative; height: 600px; background-color: rebeccapurple ">
    
    <div id="recommendationCarousel" class="carousel slide" data-ride="carousel" style="height:inherit">
        <ol class="carousel-indicators">
            <li data-target="#recommendationCarousel" data-slide-to="0" class="@currentSlide"></li>
            <li data-target="#recommendationCarousel" data-slide-to="1" class="@secondSlide"></li>
            <li data-target="#recommendationCarousel" data-slide-to="2" class="@thirdSlide"></li>
        </ol>
        <div class="carousel-inner" style="height:inherit;">
            <div class="carousel-item @firstSlide" style=" height: inherit;">
                <img class="d-block w-100" src="/got.jpg" alt="First slide" style="height:inherit;" />
            </div>
            <div class="carousel-item @secondSlide" style="height: inherit; ">
                <img class="d-block w-100" src="/supernatural.jpg" alt="Second slide" style="height:inherit;" />
            </div>
            <div class="carousel-item @thirdSlide" style="height: inherit;">
                <img class="d-block w-100" src="/tbbt.jpg" alt="Third slide" style="height:inherit;" />
            </div>
        </div>
        <a class="carousel-control-prev" href="" role="button" data-slide="prev" @onclick="()=>Manually(true)">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="" role="button" data-slide="next" @onclick="()=>Manually(false)">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>
</div>

<br />

<SerialListTable Serials="serials" />





@code {
    List<Serials> serials;


    string firstSlide = "active";
    string secondSlide = "";
    string thirdSlide = "";

    int currentPosition = 0;
    int currentSlide = 0;

    CancellationTokenSource cts;
    CancellationToken ct;

    protected override async Task OnInitializedAsync()
    {
        cts = new CancellationTokenSource();
        ct = cts.Token;
        Walkthrough(ct);

        serials = new List<Serials>()
        {
                new Serials()
                {
                    SerialName = "Game of Thrones",
                    Seasons = 8,
                    Year = 2010
                },
                new Serials()
                {
                    SerialName = "The Big Bang Theory",
                    Seasons = 12,
                    Year = 2007
                },
                new Serials()
                {
                    SerialName = "Supernatural",
                    Seasons = 15,
                    Year = 2005
                },
            };
    }

    public async Task Walkthrough(CancellationToken ct)
    {
        while (!ct.IsCancellationRequested)
        {
            await Task.Delay(3000, ct);
            currentPosition++;
            ChangeSlide();
            await InvokeAsync(() => this.StateHasChanged());
        }
    }

    public void Manually(bool backwards)
    {
        cts.Cancel();

        if (backwards)
            currentPosition--;
        else
            currentPosition++;

        ChangeSlide();
    }

    private void ChangeSlide()
    {
        currentSlide = Math.Abs(currentPosition % 3);

        switch (currentSlide)
        {
            case 0:
                firstSlide = "active";
                secondSlide = "";
                thirdSlide = "";
                break;
            case 1:
                firstSlide = "";
                secondSlide = "active";
                thirdSlide = "";
                break;
            case 2:
                firstSlide = "";
                secondSlide = "";
                thirdSlide = "active";
                break;
            default:
                break;
        }
    }


}