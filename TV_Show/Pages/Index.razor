@page "/"
@using System.Threading;
@using MongoDB.Driver;
@using System.IO;

<div class="row">
    <div class="col text-center">
        <h1>Your recommendations</h1>
    </div>
</div>

<br />

<div class="container" style="margin-left: auto; margin-right: auto; position: relative; height: 600px; width: 1000px; background-color: rebeccapurple ">

    <div id="recommendationCarousel" class="carousel slide" data-ride="carousel" style="height: inherit;">
        <ol class="carousel-indicators">
            <li data-target="#recommendationCarousel" data-slide-to="0" class="@currentSlide"></li>
            <li data-target="#recommendationCarousel" data-slide-to="1" class="@secondSlide"></li>
            <li data-target="#recommendationCarousel" data-slide-to="2" class="@thirdSlide"></li>
        </ol>
        <div class="carousel-inner" style="height: inherit;">
            <div class="carousel-item @firstSlide" style="height: inherit;">
                <a href="/GameofThrones" style="height: inherit">
                    <img class="d-block w-100" src="/got.jpg" alt="Game of Thrones" style="height: inherit;" />
                </a>
            </div>
            <div class="carousel-item @secondSlide" style="height: inherit; width: inherit;">
                <a href="/Supernatural" style="height: inherit; width: inherit;">
                    <img class="d-block w-100" src="/spn.jpg" alt="Supernatural" style="height: inherit; width: inherit;" />
                </a>
            </div>
            <div class="carousel-item @thirdSlide" style="height: inherit;">
                <a href="/TheBigBangTheory" style="height:inherit">
                    <img class="d-block w-100" src="/tbbt.jpg" alt="The Big Bang Theory" style="height:inherit;" />
                </a>
            </div>
        </div>
        <a class="carousel-control-prev" href="" role="button" data-slide="prev" @onclick="()=>Manually(true)">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="" role="button" data-slide="next" @onclick="()=>Manually(false)">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>
</div>

<br />

@*<SerialListTable Serials="serials" />*@

<button class="btn btn-primary" @onclick="FromBlazorToDBToUser">sss</button>
@if(test != null)
            {
                <h3>@test.SerialName</h3>
                <h3>@test.SerialSeason</h3>
                <h3>@test.SeriesNumber</h3>
                <h3>@test.SeriesName</h3>

            }



@code {
    GoT test;

    List<Serials> serials = new List<Serials>();

    [Parameter] public GoT GoT { get; set; }

    string firstSlide = "active";
    string secondSlide = "";
    string thirdSlide = "";

    int currentPosition = 0;
    int currentSlide = 0;

    CancellationTokenSource cts;
    CancellationToken ct;

    protected override async Task OnInitializedAsync()
    {
        cts = new CancellationTokenSource();
        ct = cts.Token;
        Walkthrough(ct);

        StreamReader r = new StreamReader(Path.GetFullPath("serials.txt"));
        string s = null;
        while ((s = r.ReadLine()) != null)
        {
            Serials x = new Serials();
            x.SerialName = s;
            x.Seasons = int.Parse(r.ReadLine());
            x.Year = int.Parse(r.ReadLine());
            serials.Add(x);
        }
        r.Close();



        //var connectionString = "mongodb://localhost";
        //var client = new MongoClient(connectionString);
        //var db = client.GetDatabase("TV_Shows");
        //var collection = db.GetCollection<Serials>("Serials").AsQueryable();
        //foreach (var item in collection)
        //{
        //    Serials ser = new Serials(item.SerialName, item.Seasons, item.Year);
        //    serials.Add(ser);
        //}

    }

    public async Task Walkthrough(CancellationToken ct)
    {
        while (!ct.IsCancellationRequested)
        {
            await Task.Delay(3000, ct);
            currentPosition++;
            ChangeSlide();
            await InvokeAsync(() => this.StateHasChanged());
        }
    }

    public void Manually(bool backwards)
    {
        cts.Cancel();

        if (backwards)
            currentPosition--;
        else
            currentPosition++;

        ChangeSlide();
    }

    private void ChangeSlide()
    {
        currentSlide = Math.Abs(currentPosition % 3);

        switch (currentSlide)
        {
            case 0:
                firstSlide = "active";
                secondSlide = "";
                thirdSlide = "";
                break;
            case 1:
                firstSlide = "";
                secondSlide = "active";
                thirdSlide = "";
                break;
            case 2:
                firstSlide = "";
                secondSlide = "";
                thirdSlide = "active";
                break;
            default:
                break;
        }
    }

    private void FromBlazorToDBToUser()
    {
        var connectionString = "mongodb://localhost";
        var client = new MongoClient(connectionString);
        var db = client.GetDatabase("TV_Shows");
        var collection = db.GetCollection<GoT>("GameofThrones");
        test = collection.Find(x => x.SeriesName == "Winter is Coming").FirstOrDefault();
        //foreach (var item in collection)
        //{
        //    User.AddUserSerialsToDb(new User(item.SerialName, item.SerialSeason, item.SeriesNumber, item.SeriesName));
        //}
    }
}