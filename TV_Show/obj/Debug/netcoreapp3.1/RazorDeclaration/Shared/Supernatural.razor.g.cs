// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TV_Show.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using TV_Show;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using TV_Show.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using TV_Show.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Projects\TV_Show\TV_Show.git\TV_Show\Shared\Supernatural.razor"
using MongoDB.Driver;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Projects\TV_Show\TV_Show.git\TV_Show\Shared\Supernatural.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Supernatural")]
    public partial class Supernatural : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 744 "D:\Projects\TV_Show\TV_Show.git\TV_Show\Shared\Supernatural.razor"
       
    public string UserLogin { get; set; }
    public string UserPassword { get; set; }

    public bool IsUserLogged { get; set; }

    public bool UserWatch { get; set; }
    public bool UserWillWatch { get; set; }
    public bool UserStopWatch { get; set; }
    public bool UserDoesntWatch { get; set; }

    public int CurrentUserRatingSpn { get; set; }
    int currentUserRating;
    double allUsersRating = 0;
    double usersRating = 0;
    int userCount = 0;

    public int SpnSeriesCount { get; set; }
    int spnSeriesCount = 0;
    public int SpnTimeCount { get; set; }
    int spnTimeCount = 0;

    [Parameter] public Spn Spn { get; set; }
    List<Spn> spn = new List<Spn>();

    string date;
    string information;
    int seasons;
    int seriesTime = 43;

    protected override async Task OnInitializedAsync()
    {
        StreamReader rr = new StreamReader(Path.GetFullPath("spn.txt"));
        string ss = null;
        while ((ss = rr.ReadLine()) != null)
        {
            Spn x = new Spn();
            x.SerialName = ss;
            x.SerialNameEng = rr.ReadLine();
            x.SerialSeason = int.Parse(rr.ReadLine());
            x.SeriesNumber = int.Parse(rr.ReadLine());
            x.SeriesName = rr.ReadLine();
            spn.Add(x);
            spnSeriesCount++;
        }
        rr.Close();

        UserLogin = await storage.GetItemAsync<string>("UserLogin");
        UserPassword = await storage.GetItemAsync<string>("UserPassword");
        IsUserLogged = await storage.GetItemAsync<bool>("IsUserLogged");

        var connectionStringSpn = "mongodb://localhost";
        var clientSpn = new MongoClient(connectionStringSpn);
        var dbSpn = clientSpn.GetDatabase("TV_Shows");
        var collectionSpn = dbSpn.GetCollection<Spn>("Supernatural");
        if (collectionSpn.Find(x => x.SerialNameEng == "Supernatural").CountDocuments() == 0)
            FromBlazorToDBToSerial();

        spnTimeCount = 43 * spnSeriesCount;

        await storage.SetItemAsync<int>("SpnSeriesCount", spnSeriesCount);
        await storage.SetItemAsync<int>("SpnTimeCount", spnTimeCount);

        UserWatch = await storage.GetItemAsync<bool>("UserWatch");
        UserWillWatch = await storage.GetItemAsync<bool>("UserWillWatch");
        UserStopWatch = await storage.GetItemAsync<bool>("UserStopWatch");
        UserDoesntWatch = await storage.GetItemAsync<bool>("UserDoesntWatch");

        var connectionStringSerials = "mongodb://localhost";
        var clientSerials = new MongoClient(connectionStringSerials);
        var dbSerials = clientSerials.GetDatabase("TV_Shows");
        var collectionSerials = dbSerials.GetCollection<Serials>("Serials");
        if (collectionSerials.Find(x => x.SerialNameEng == "Supernatural").CountDocuments() > 0)
        {
            Serials ser = new Serials();
            ser.ReleaseDate = collectionSerials.Find(x => x.SerialNameEng == "Supernatural").FirstOrDefault().ReleaseDate;
            ser.FinishDate = collectionSerials.Find(x => x.SerialNameEng == "Supernatural").FirstOrDefault().FinishDate;
            ser.Seasons = collectionSerials.Find(x => x.SerialNameEng == "Supernatural").FirstOrDefault().Seasons;
            ser.About = collectionSerials.Find(x => x.SerialNameEng == "Supernatural").FirstOrDefault().About;
            date = ser.ReleaseDate + " - " + ser.FinishDate;
            seasons = ser.Seasons;
            information = ser.About;
        }

        var connectionStringUserRating = "mongodb://localhost";
        var clientUserRating = new MongoClient(connectionStringUserRating);
        var dbUserRating = clientUserRating.GetDatabase("TV_Shows");
        var collectionUserRating = dbUserRating.GetCollection<UserRating>("UserRating").AsQueryable();
        foreach (var item in collectionUserRating)
        {
            if (item.SerialNameEng == "Supernatural")
            {
                userCount++;
                usersRating += item.SingleUserRating;
            }
        }
        allUsersRating = usersRating / userCount;

        var collectionUserRating1 = dbUserRating.GetCollection<UserRating>("UserRating");
        if (collectionUserRating1.Find(x => x.SerialNameEng == "Supernatural"
            && x.UserRatingLogin == UserLogin).CountDocuments() > 0)
        {
            UserRating ur = new UserRating();
            ur.SingleUserRating = collectionUserRating1.Find(x => x.SerialNameEng == "Supernatural" &&
                x.UserRatingLogin == UserLogin).FirstOrDefault().SingleUserRating;
            currentUserRating = ur.SingleUserRating;

        }
        await storage.SetItemAsync<int>("CurrentUserRatingSpn", currentUserRating);
        CurrentUserRatingSpn = await storage.GetItemAsync<int>("CurrentUserRatingSpn");
    }

    private void FromBlazorToDBToSerial()
    {
        foreach (var item in spn)
        {
            Spn.AddSeriesSpnToDb(new Spn(item.SerialName, item.SerialNameEng, item.SerialSeason, item.SeriesNumber,
                item.SeriesName));
        }
    }

    async Task UserIsWatchingAsync()
    {
        await storage.SetItemAsync<bool>("UserWatch", true);
        await storage.SetItemAsync<bool>("UserWillWatch", false);
        await storage.SetItemAsync<bool>("UserStopWatch", false);
        await storage.SetItemAsync<bool>("UserDoesntWatch", false);

        UserWatch = await storage.GetItemAsync<bool>("UserWatch");
        UserWillWatch = await storage.GetItemAsync<bool>("UserWillWatch");
        UserStopWatch = await storage.GetItemAsync<bool>("UserStopWatch");
        UserDoesntWatch = await storage.GetItemAsync<bool>("UserDoesntWatch");
    }

    async Task UserWillWatchingAsync()
    {
        await storage.SetItemAsync<bool>("UserWatch", false);
        await storage.SetItemAsync<bool>("UserWillWatch", true);
        await storage.SetItemAsync<bool>("UserStopWatch", false);
        await storage.SetItemAsync<bool>("UserDoesntWatch", false);

        UserWatch = await storage.GetItemAsync<bool>("UserWatch");
        UserWillWatch = await storage.GetItemAsync<bool>("UserWillWatch");
        UserStopWatch = await storage.GetItemAsync<bool>("UserStopWatch");
        UserDoesntWatch = await storage.GetItemAsync<bool>("UserDoesntWatch");
    }

    async Task UserStopWatchingAsync()
    {
        await storage.SetItemAsync<bool>("UserWatch", false);
        await storage.SetItemAsync<bool>("UserWillWatch", false);
        await storage.SetItemAsync<bool>("UserStopWatch", true);
        await storage.SetItemAsync<bool>("UserDoesntWatch", false);

        UserWatch = await storage.GetItemAsync<bool>("UserWatch");
        UserWillWatch = await storage.GetItemAsync<bool>("UserWillWatch");
        UserStopWatch = await storage.GetItemAsync<bool>("UserStopWatch");
        UserDoesntWatch = await storage.GetItemAsync<bool>("UserDoesntWatch");
    }

    async Task UserDontWatchingAsync()
    {
        await storage.SetItemAsync<bool>("UserWatch", false);
        await storage.SetItemAsync<bool>("UserWillWatch", false);
        await storage.SetItemAsync<bool>("UserStopWatch", false);
        await storage.SetItemAsync<bool>("UserDoesntWatch", true);

        UserWatch = await storage.GetItemAsync<bool>("UserWatch");
        UserWillWatch = await storage.GetItemAsync<bool>("UserWillWatch");
        UserStopWatch = await storage.GetItemAsync<bool>("UserStopWatch");
        UserDoesntWatch = await storage.GetItemAsync<bool>("UserDoesntWatch");
    }

    async Task Rating(int rating)
    {
        await storage.SetItemAsync<int>("CurrentUserRatingSpn", rating);

        CurrentUserRatingSpn = await storage.GetItemAsync<int>("CurrentUserRatingSpn");

        var connectionStringUserRating = "mongodb://localhost";
        var clientUserRating = new MongoClient(connectionStringUserRating);
        var dbUserRating = clientUserRating.GetDatabase("TV_Shows");
        var collectionUserRating = dbUserRating.GetCollection<UserRating>("UserRating");
        if (collectionUserRating.Find(x => x.UserRatingLogin == UserLogin &&
                x.UserRatingPassword == UserPassword && x.SerialNameEng == "Supernatural").CountDocuments() == 0)
        {
            UserRating.AddUserRatingToDb(new UserRating(UserLogin, UserPassword, "Supernatural", CurrentUserRatingSpn));
        }
        else
        {
            if (collectionUserRating.Find(x => x.SingleUserRating != CurrentUserRatingSpn).CountDocuments() > 0)
            {
                collectionUserRating.DeleteOne(x => x.UserRatingLogin == UserLogin &&
                x.UserRatingPassword == UserPassword && x.SerialNameEng == "Supernatural" &&
                x.SingleUserRating != CurrentUserRatingSpn);

                UserRating.AddUserRatingToDb(new UserRating(UserLogin, UserPassword, "Game of Thrones", CurrentUserRatingSpn));
            }
        }
    }

    private void Rating5()
    {
        currentUserRating = 5;
        Rating(currentUserRating);
    }

    private void Rating4()
    {
        currentUserRating = 4;
        Rating(currentUserRating);
    }

    private void Rating3()
    {
        currentUserRating = 3;
        Rating(currentUserRating);
    }

    private void Rating2()
    {
        currentUserRating = 2;
        Rating(currentUserRating);
    }

    private void Rating1()
    {
        currentUserRating = 1;
        Rating(currentUserRating);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager manager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.LocalStorage.ILocalStorageService storage { get; set; }
    }
}
#pragma warning restore 1591
