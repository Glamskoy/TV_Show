// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TV_Show.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using TV_Show;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using TV_Show.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using TV_Show.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Projects\TV_Show\TV_Show.git\TV_Show\Shared\Profile.razor"
using MongoDB.Driver;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Profile")]
    public partial class Profile : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 193 "D:\Projects\TV_Show\TV_Show.git\TV_Show\Shared\Profile.razor"
       
    public bool IsUserLogged { get; set; }
    public string UserLogin { get; set; }
    public string UserPassword { get; set; }
    public string SerialIsSelected { get; set; }

    public int GoTSeriesCount { get; set; }
    public int SpnSeriesCount { get; set; }
    public int TBBTSeriesCount { get; set; }

    public int GoTTimeCount { get; set; }
    public int SpnTimeCount { get; set; }
    public int TBBTTimeCount { get; set; }

    //User user1 = new User();

    List<UserSeries> user = new List<UserSeries>();
    List<UserSeries> user1 = new List<UserSeries>();

    int allEpisodsCount = 0;
    int allTimeCount = 0;
    int allHoursCount;

    int episodsCount;
    int minutsCount = 0;
    int hoursCount = 0;

    int episodString;
    int timeString;
    int hourString;

    bool userIsAuthorised = true;


    protected override async Task OnInitializedAsync()
    {
        IsUserLogged = await storage.GetItemAsync<bool>("IsUserLogged");
        UserLogin = await storage.GetItemAsync<string>("UserLogin");
        UserPassword = await storage.GetItemAsync<string>("UserPassword");
        SerialIsSelected = await storage.GetItemAsync<string>("SerialIsSelected");

        GoTSeriesCount = await storage.GetItemAsync<int>("GoTSeriesCount");
        SpnSeriesCount = await storage.GetItemAsync<int>("SpnSeriesCount");
        TBBTSeriesCount = await storage.GetItemAsync<int>("TBBTSeriesCount");

        GoTTimeCount = await storage.GetItemAsync<int>("GoTTimeCount");
        SpnTimeCount = await storage.GetItemAsync<int>("SpnTimeCount");
        TBBTTimeCount = await storage.GetItemAsync<int>("TBBTTimeCount");

        var connectionString1 = "mongodb://localhost";
        var client1 = new MongoClient(connectionString1);
        var db1 = client1.GetDatabase("TV_Shows");
        var collection1 = db1.GetCollection<UserSeries>("UserSeries");

        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
     x.UserSeriesPassword == UserPassword && x.SerialName == "Game of Thrones").CountDocuments() > 0)
        {
            allEpisodsCount += GoTSeriesCount;
            allTimeCount += GoTTimeCount;
            if (allTimeCount >= 60)
                allHoursCount = allTimeCount / 60;
        }

        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
        x.UserSeriesPassword == UserPassword && x.SerialName == "The Big Bang Theory").CountDocuments() > 0)
        {
            allEpisodsCount += TBBTSeriesCount;
            allTimeCount += TBBTTimeCount;
            if (allTimeCount >= 60)
                allHoursCount = allTimeCount / 60;
        }

        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
        x.UserSeriesPassword == UserPassword && x.SerialName == "Supernatural").CountDocuments() > 0)
        {
            allEpisodsCount += SpnSeriesCount;
            allTimeCount += SpnTimeCount;
            if (allTimeCount >= 60)
                allHoursCount = allTimeCount / 60;
        }

        episodsCount = Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword).CountDocuments());

        minutsCount += 57 * Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialName == "Game of Thrones").CountDocuments());

        minutsCount += 43 * Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialName == "Supernatural").CountDocuments());

        minutsCount += 22 * Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialName == "The Big Bang Theory").CountDocuments());

        if (minutsCount >= 60)
            hoursCount = minutsCount / 60;

        episodString = episodsCount * 100 / allEpisodsCount;
        timeString = minutsCount * 100 / allTimeCount;
        hourString = hoursCount * 100 / allHoursCount;

        var connectionString = "mongodb://localhost";
        var client = new MongoClient(connectionString);
        var db = client.GetDatabase("TV_Shows");
        var collection = db.GetCollection<UserSeries>("UserSeries").AsQueryable();
        foreach (var item in collection)
        {
            UserSeries x = new UserSeries();
            x.UserSeriesLogin = item.UserSeriesLogin;
            x.UserSeriesPassword = item.UserSeriesPassword;
            x.SerialName = item.SerialName;
            user.Add(x);
        }
        foreach (var item in collection)
        {
            UserSeries x = new UserSeries();
            x.UserSeriesLogin = item.UserSeriesLogin;
            x.UserSeriesPassword = item.UserSeriesPassword;
            x.SerialName = item.SerialName;
            x.SerialSeason = item.SerialSeason;
            x.SeriesNumber = item.SeriesNumber;
            x.SeriesName = item.SeriesName;
            user1.Add(x);
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager manager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.LocalStorage.ILocalStorageService storage { get; set; }
    }
}
#pragma warning restore 1591
