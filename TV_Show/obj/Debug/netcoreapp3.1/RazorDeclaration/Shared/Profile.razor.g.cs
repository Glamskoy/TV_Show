// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TV_Show.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using TV_Show;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using TV_Show.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Projects\TV_Show\TV_Show.git\TV_Show\_Imports.razor"
using TV_Show.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Projects\TV_Show\TV_Show.git\TV_Show\Shared\Profile.razor"
using MongoDB.Driver;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Profile")]
    public partial class Profile : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 351 "D:\Projects\TV_Show\TV_Show.git\TV_Show\Shared\Profile.razor"
       
    public bool IsUserLogged { get; set; }
    public string UserLogin { get; set; }
    public string UserPassword { get; set; }

    public bool UserWatch { get; set; }
    public bool UserWillWatch { get; set; }
    public bool UserStopWatch { get; set; }
    public bool UserDoesntWatch { get; set; }

    public int CurrentUserRatingGoT { get; set; }
    public int CurrentUserRatingSpn { get; set; }
    public int CurrentUserRatingTBBT { get; set; }
    int currentUserRatingGoT;
    int currentUserRatingSpn;
    int currentUserRatingTBBT;

    public int GoTSeriesCount { get; set; }
    public int SpnSeriesCount { get; set; }
    public int TBBTSeriesCount { get; set; }

    public int GoTTimeCount { get; set; }
    public int SpnTimeCount { get; set; }
    public int TBBTTimeCount { get; set; }

    //User user1 = new User();

    List<UserSeries> user = new List<UserSeries>();
    List<UserSeries> user1 = new List<UserSeries>();

    int allEpisodsCount = 0;
    int allTimeCount = 0;
    int allHoursCount = 0;

    int episodsCount;
    int minutsCount = 0;
    int hoursCount = 0;

    int episodString;
    int timeString;
    int hourString;

    int gotEpisodsCount;
    int gotEpisodsString;
    bool gotIsSelected = false;

    int spnEpisodsCount;
    int spnEpisodsString;
    bool spnIsSelected = false;

    int tbbtEpisodsCount;
    int tbbtEpisodsString;
    bool tbbtIsSelected = false;

    bool userIsAuthorised = true;


    protected override async Task OnInitializedAsync()
    {
        IsUserLogged = await storage.GetItemAsync<bool>("IsUserLogged");
        UserLogin = await storage.GetItemAsync<string>("UserLogin");
        UserPassword = await storage.GetItemAsync<string>("UserPassword");

        UserWatch = await storage.GetItemAsync<bool>("UserWatch");
        UserWillWatch = await storage.GetItemAsync<bool>("UserWillWatch");
        UserStopWatch = await storage.GetItemAsync<bool>("UserStopWatch");
        UserDoesntWatch = await storage.GetItemAsync<bool>("UserDoesntWatch");

        GoTSeriesCount = await storage.GetItemAsync<int>("GoTSeriesCount");
        SpnSeriesCount = await storage.GetItemAsync<int>("SpnSeriesCount");
        TBBTSeriesCount = await storage.GetItemAsync<int>("TBBTSeriesCount");

        GoTTimeCount = await storage.GetItemAsync<int>("GoTTimeCount");
        SpnTimeCount = await storage.GetItemAsync<int>("SpnTimeCount");
        TBBTTimeCount = await storage.GetItemAsync<int>("TBBTTimeCount");

        var connectionString1 = "mongodb://localhost";
        var client1 = new MongoClient(connectionString1);
        var db1 = client1.GetDatabase("TV_Shows");
        var collection1 = db1.GetCollection<UserSeries>("UserSeries");

        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Game of Thrones").CountDocuments() > 0)
        {
            allEpisodsCount += GoTSeriesCount;
            allTimeCount += GoTTimeCount;
            if (allTimeCount >= 60)
                allHoursCount = allTimeCount / 60;
        }

        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "The Big Bang Theory").CountDocuments() > 0)
        {
            allEpisodsCount += TBBTSeriesCount;
            allTimeCount += TBBTTimeCount;
            if (allTimeCount >= 60)
                allHoursCount = allTimeCount / 60;
        }

        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Supernatural").CountDocuments() > 0)
        {
            allEpisodsCount += SpnSeriesCount;
            allTimeCount += SpnTimeCount;
            if (allTimeCount >= 60)
                allHoursCount = allTimeCount / 60;
        }

        episodsCount = Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword).CountDocuments());

        minutsCount += 57 * Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Game of Thrones").CountDocuments());

        minutsCount += 43 * Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Supernatural").CountDocuments());

        minutsCount += 22 * Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "The Big Bang Theory").CountDocuments());

        if (minutsCount >= 60)
            hoursCount = minutsCount / 60;

        if (allEpisodsCount > 0)
            episodString = episodsCount * 100 / allEpisodsCount;
        else
            episodString = 0;
        if (allTimeCount > 0)
            timeString = minutsCount * 100 / allTimeCount;
        else
            timeString = 0;
        if (allHoursCount > 0)
            hourString = hoursCount * 100 / allHoursCount;
        else
            hourString = 0;

        gotEpisodsCount = Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
        x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Game of Thrones").CountDocuments());
        gotEpisodsString = gotEpisodsCount * 100 / GoTSeriesCount;
        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Game of Thrones").CountDocuments() > 0)
            gotIsSelected = true;

        spnEpisodsCount = Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Supernatural").CountDocuments());
        spnEpisodsString = spnEpisodsCount * 100 / SpnSeriesCount;
        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "Supernatural").CountDocuments() > 0)
            spnIsSelected = true;

        tbbtEpisodsCount = Convert.ToInt32(collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "The Big Bang Theory").CountDocuments());
        tbbtEpisodsString = tbbtEpisodsCount * 100 / TBBTSeriesCount;
        if (collection1.Find(x => x.UserSeriesLogin == UserLogin &&
            x.UserSeriesPassword == UserPassword && x.SerialNameEng == "The Big Bang Theory").CountDocuments() > 0)
            tbbtIsSelected = true;

        var connectionStringUserRating = "mongodb://localhost";
        var clientUserRating = new MongoClient(connectionStringUserRating);
        var dbUserRating = clientUserRating.GetDatabase("TV_Shows");
        var collectionUserRating = dbUserRating.GetCollection<UserRating>("UserRating");
        if (collectionUserRating.Find(x => x.SerialNameEng == "Game of Thrones"
            && x.UserRatingLogin == UserLogin).CountDocuments() > 0)
        {
            UserRating ur = new UserRating();
            ur.SingleUserRating = collectionUserRating.Find(x => x.SerialNameEng == "Game of Thrones" &&
                x.UserRatingLogin == UserLogin).FirstOrDefault().SingleUserRating;
            currentUserRatingGoT = ur.SingleUserRating;
        }
        await storage.SetItemAsync<int>("CurrentUserRatingGoT", currentUserRatingGoT);
        CurrentUserRatingGoT = await storage.GetItemAsync<int>("CurrentUserRatingGoT");

        if (collectionUserRating.Find(x => x.SerialNameEng == "Supernatural"
                    && x.UserRatingLogin == UserLogin).CountDocuments() > 0)
        {
            UserRating ur = new UserRating();
            ur.SingleUserRating = collectionUserRating.Find(x => x.SerialNameEng == "Supernatural" &&
                x.UserRatingLogin == UserLogin).FirstOrDefault().SingleUserRating;
            currentUserRatingSpn = ur.SingleUserRating;
        }
        await storage.SetItemAsync<int>("CurrentUserRatingSpn", currentUserRatingSpn);
        CurrentUserRatingSpn = await storage.GetItemAsync<int>("CurrentUserRatingSpn");

        if (collectionUserRating.Find(x => x.SerialNameEng == "The Big Bang Theory"
        && x.UserRatingLogin == UserLogin).CountDocuments() > 0)
        {
            UserRating ur = new UserRating();
            ur.SingleUserRating = collectionUserRating.Find(x => x.SerialNameEng == "The Big Bang Theory" &&
                x.UserRatingLogin == UserLogin).FirstOrDefault().SingleUserRating;
            currentUserRatingTBBT = ur.SingleUserRating;
        }
        await storage.SetItemAsync<int>("CurrentUserRatingTBBT", currentUserRatingTBBT);
        CurrentUserRatingTBBT = await storage.GetItemAsync<int>("CurrentUserRatingTBBT");
    }

    async Task RatingGoT(int rating)
    {
        await storage.SetItemAsync<int>("CurrentUserRatingGoT", rating);
        CurrentUserRatingGoT = await storage.GetItemAsync<int>("CurrentUserRatingGoT");

        var connectionStringUserRating = "mongodb://localhost";
        var clientUserRating = new MongoClient(connectionStringUserRating);
        var dbUserRating = clientUserRating.GetDatabase("TV_Shows");
        var collectionUserRating = dbUserRating.GetCollection<UserRating>("UserRating");
        if (collectionUserRating.Find(x => x.UserRatingLogin == UserLogin &&
                x.UserRatingPassword == UserPassword && x.SerialNameEng == "Game of Thrones").CountDocuments() == 0)
        {
            UserRating.AddUserRatingToDb(new UserRating(UserLogin, UserPassword, "Game of Thrones",
                CurrentUserRatingGoT));
        }
        else
        {
            if (collectionUserRating.Find(x => x.SingleUserRating != CurrentUserRatingGoT).CountDocuments() > 0)
            {
                collectionUserRating.DeleteOne(x => x.UserRatingLogin == UserLogin &&
                x.UserRatingPassword == UserPassword && x.SerialNameEng == "Game of Thrones" &&
                x.SingleUserRating != CurrentUserRatingGoT);

                UserRating.AddUserRatingToDb(new UserRating(UserLogin, UserPassword, "Game of Thrones",
                    CurrentUserRatingGoT));
            }
        }
    }

    private void Rating5GoT()
    {
        currentUserRatingGoT = 5;
        RatingGoT(currentUserRatingGoT);
    }

    private void Rating4GoT()
    {
        currentUserRatingGoT = 4;
        RatingGoT(currentUserRatingGoT);

    }

    private void Rating3GoT()
    {
        currentUserRatingGoT = 3;
        RatingGoT(currentUserRatingGoT);
    }

    private void Rating2GoT()
    {
        currentUserRatingGoT = 2;
        RatingGoT(currentUserRatingGoT);
    }

    private void Rating1GoT()
    {
        currentUserRatingGoT = 1;
        RatingGoT(currentUserRatingGoT);
    }

    async Task RatingSpn(int rating)
    {
        await storage.SetItemAsync<int>("CurrentUserRatingSpn", rating);
        CurrentUserRatingSpn = await storage.GetItemAsync<int>("CurrentUserRatingSpn");

        var connectionStringUserRating = "mongodb://localhost";
        var clientUserRating = new MongoClient(connectionStringUserRating);
        var dbUserRating = clientUserRating.GetDatabase("TV_Shows");
        var collectionUserRating = dbUserRating.GetCollection<UserRating>("UserRating");

        if (collectionUserRating.Find(x => x.UserRatingLogin == UserLogin &&
            x.UserRatingPassword == UserPassword && x.SerialNameEng == "Supernatural").CountDocuments() == 0)
        {
            UserRating.AddUserRatingToDb(new UserRating(UserLogin, UserPassword, "Supernatural",
                CurrentUserRatingSpn));
        }
        else
        {
            if (collectionUserRating.Find(x => x.SingleUserRating != CurrentUserRatingSpn).CountDocuments() > 0)
            {
                collectionUserRating.DeleteOne(x => x.UserRatingLogin == UserLogin &&
                x.UserRatingPassword == UserPassword && x.SerialNameEng == "Supernatural" &&
                x.SingleUserRating != CurrentUserRatingSpn);

                UserRating.AddUserRatingToDb(new UserRating(UserLogin, UserPassword, "Supernatural",
                    CurrentUserRatingSpn));
            }
        }
    }

    private void Rating5Spn()
    {
        currentUserRatingSpn = 5;
        RatingSpn(currentUserRatingSpn);
    }

    private void Rating4Spn()
    {
        currentUserRatingSpn = 4;
        RatingSpn(currentUserRatingSpn);
    }

    private void Rating3Spn()
    {
        currentUserRatingSpn = 3;
        RatingSpn(currentUserRatingSpn);
    }

    private void Rating2Spn()
    {
        currentUserRatingSpn = 2;
        RatingSpn(currentUserRatingSpn);
    }

    private void Rating1Spn()
    {
        currentUserRatingSpn = 1;
        RatingSpn(currentUserRatingSpn);
    }

    async Task RatingTBBT(int rating)
    {
        await storage.SetItemAsync<int>("CurrentUserRatingTBBT", rating);
        CurrentUserRatingTBBT = await storage.GetItemAsync<int>("CurrentUserRatingTBBT");

        var connectionStringUserRating = "mongodb://localhost";
        var clientUserRating = new MongoClient(connectionStringUserRating);
        var dbUserRating = clientUserRating.GetDatabase("TV_Shows");
        var collectionUserRating = dbUserRating.GetCollection<UserRating>("UserRating");

        if (collectionUserRating.Find(x => x.UserRatingLogin == UserLogin &&
            x.UserRatingPassword == UserPassword && x.SerialNameEng == "The Big Bang Theory").CountDocuments() == 0)
        {
            UserRating.AddUserRatingToDb(new UserRating(UserLogin, UserPassword, "The Big Bang Theory",
              CurrentUserRatingTBBT));
        }
        else
        {
            if (collectionUserRating.Find(x => x.SingleUserRating != CurrentUserRatingTBBT).CountDocuments() > 0)
            {
                collectionUserRating.DeleteOne(x => x.UserRatingLogin == UserLogin &&
                x.UserRatingPassword == UserPassword && x.SerialNameEng == "The Big Bang Theory" &&
                x.SingleUserRating != CurrentUserRatingTBBT);

                UserRating.AddUserRatingToDb(new UserRating(UserLogin, UserPassword, "The Big Bang Theory",
                    CurrentUserRatingTBBT));
            }
        }
    }

    private void Rating5TBBT()
    {
        currentUserRatingTBBT = 5;
        RatingTBBT(currentUserRatingTBBT);
    }

    private void Rating4TBBT()
    {
        currentUserRatingTBBT = 4;
        RatingTBBT(currentUserRatingTBBT);
    }

    private void Rating3TBBT()
    {
        currentUserRatingTBBT = 3;
        RatingTBBT(currentUserRatingTBBT);
    }

    private void Rating2TBBT()
    {
        currentUserRatingTBBT = 2;
        RatingTBBT(currentUserRatingTBBT);
    }

    private void Rating1TBBT()
    {
        currentUserRatingTBBT = 1;
        RatingTBBT(currentUserRatingTBBT);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager manager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.LocalStorage.ILocalStorageService storage { get; set; }
    }
}
#pragma warning restore 1591
